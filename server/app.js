// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var LeadSchema, MoonSchema, PlanetSchema, StarSchema, UserSchema, app, async, db_utils, dbs, dont_drop_list, errors, express, http, make_db_name, mem, mongoose, reply_with, setup, status, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require('express');

  http = require('http');

  _ = require('underscore');

  async = require('async');

  mongoose = require('mongoose');

  mem = require('./utils/memory');

  errors = require('./support/errors');

  db_utils = require('./support/db_utils');

  reply_with = require('./support/reply_with');

  StarSchema = require('./domain/star');

  PlanetSchema = require('./domain/planet');

  MoonSchema = require('./domain/moon');

  UserSchema = require('./domain/user');

  LeadSchema = require('./domain/admin/lead');

  app = express();

  require('./config')(app);

  dbs = {};

  status = "Live";

  dont_drop_list = ['h2ash_stars'];

  make_db_name = function(name, test_mode) {
    var db_name;
    db_name = "mongodb://localhost/" + name;
    if (test_mode) {
      db_name = db_name + "_test";
    }
    return db_name;
  };

  setup = function(test_mode, cb) {
    if (test_mode) {
      status = "Test";
    }
    return async.parallel([
      function(cb) {
        var db_name;
        db_name = "h2ash_stars";
        return dbs.h2ash_stars = db_utils.open_db(make_db_name(db_name, test_mode), {
          'Star': StarSchema,
          'Planet': PlanetSchema,
          'Moon': MoonSchema
        }, function(db_context) {
          console.log("Database opened...[" + db_context.conn.name + "]");
          if (test_mode && __indexOf.call(dont_drop_list, db_name) < 0) {
            return db_context.conn.db.dropDatabase(function() {
              console.log("Database dropped...[" + db_context.conn.name + "]");
              return cb(null, '');
            });
          } else {
            return cb(null, '');
          }
        });
      }, function(cb) {
        var db_name;
        db_name = "h2ash_auth";
        return dbs.h2ash_auth = db_utils.open_db(make_db_name("h2ash_auth", test_mode), {
          'User': UserSchema
        }, function(db_context) {
          console.log("Database opened...[" + db_context.conn.name + "]");
          if (test_mode && __indexOf.call(dont_drop_list, db_name) < 0) {
            return db_context.conn.db.dropDatabase(function() {
              console.log("Database dropped...[" + db_context.conn.name + "]");
              return cb(null, '');
            });
          } else {
            return cb(null, '');
          }
        });
      }, function(cb) {
        var db_name;
        db_name = "h2ash_admin";
        return dbs.h2ash_admin = db_utils.open_db(make_db_name("h2ash_admin", test_mode), {
          'Lead': LeadSchema
        }, function(db_context) {
          console.log("Database opened...[" + db_context.conn.name + "]");
          if (test_mode && __indexOf.call(dont_drop_list, db_name) < 0) {
            return db_context.conn.db.dropDatabase(function() {
              console.log("Database dropped...[" + db_context.conn.name + "]");
              return cb(null, '');
            });
          } else {
            return cb(null, '');
          }
        });
      }
    ], function() {
      console.log('All databases open ...');
      require('./routes/pre_registration_routes')(app, dbs, '/pre_registration');
      require('./routes/registration_routes')(app, dbs, '/registration');
      require('./routes/authentication_routes')(app, dbs, '/authentication');
      if ((test_mode != null) && test_mode) {
        require('./routes/test_routes')(app, dbs, '/test');
      }
      console.log('All routes loaded ...');
      return cb(app, dbs);
    });
  };

  module.exports = setup;

  app.get('/status', function(req, res) {
    return reply_with(req, res, errors.OK, {
      status: status
    });
  });

  /*
  app.post '/overview', auth_filters.auth, (req, res) ->
    reply_with req, res, errors.OK,
      action_points : 10
  
  
  
  
  app.get '/get_stars', (req,res) ->
    h2ash_stars.Star.find()
    .select('name wavelength position.cc.x position.cc.y position.cc.z')
    .exec (err,loaded) ->
      reply_with req,res,errors.OK,
        err : err
        status : 'OK'
        stars : loaded
  */


}).call(this);
