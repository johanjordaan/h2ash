// Generated by CoffeeScript 1.6.3
(function() {
  var construct, fixed, method, probability, range, rnd_variable, select_list, select_one, select_type_create_instance, variance, _;

  _ = require('underscore');

  construct = function(type, parent, index) {
    var key, methods, ret_val, _i, _len, _ref;
    ret_val = {
      _parent: parent,
      _index: index
    };
    methods = [];
    _ref = _.keys(type);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      ret_val[key] = type[key].run(ret_val);
    }
    return ret_val;
  };

  fixed = function(p) {
    var ret_val;
    ret_val = {
      value: p.value,
      run: function(self) {
        return this.value;
      }
    };
    return ret_val;
  };

  rnd_variable = function(p) {
    var ret_val;
    if (p.min == null) {
      p.min = 0;
    }
    if (p.floor == null) {
      p.floor = false;
    }
    if (p.distribution == null) {
      p.distribution = 1;
    }
    return ret_val = {
      min: p.min,
      max: p.max,
      floor: p.floor,
      distribution: p.distribution,
      run: function(self) {
        var i, _i, _len, _ref;
        ret_val = 0;
        _ref = _.range(this.distribution);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          ret_val += _.random(this.min, this.max);
        }
        ret_val = ret_val / this.distribution;
        if (this.floor) {
          ret_val = Math.floor(ret_val);
        }
        return ret_val;
      }
    };
  };

  variance = function(p) {
    var ret_val;
    if (!p.variance) {
      p.variance = 0;
    }
    return ret_val = {
      mean: p.mean,
      variance: p.variance,
      run: function(self) {
        var mean;
        mean = this.mean;
        if (_.isObject(mean)) {
          mean = mean.run();
        }
        return mean + mean * this.variance * (0.5 - Math.random());
      }
    };
  };

  select_one = function(values) {
    var ret_val;
    return ret_val = {
      values: values,
      run: function(self) {
        var default_probability, probability, r, total_probability, v, _i, _len, _ref;
        r = Math.random();
        default_probability = 1 / _.size(this.values);
        total_probability = 0;
        _ref = this.values;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          probability = default_probability;
          if (v.probability != null) {
            probability = v.probability;
          }
          total_probability += probability;
          if (r <= total_probability) {
            if ((v.type != null) && (v.probability != null)) {
              return v.type;
            } else {
              return v;
            }
          }
        }
      }
    };
  };

  select_type_create_instance = function(values) {
    var ret_val;
    return ret_val = {
      type: select_one(values),
      run: function(self) {
        var type;
        type = this.type.run();
        return construct(type, self);
      }
    };
  };

  probability = function(p) {
    var ret_val;
    return ret_val = {
      percentage: p.percentage,
      run: function(self) {
        return Math.random() <= this.percentage;
      }
    };
  };

  select_list = function(p) {
    var ret_val;
    return ret_val = {
      size: p.size,
      item: p.item,
      run: function(self) {
        var i, list_size, new_item, type, _i, _len, _ref;
        ret_val = [];
        if (_.isObject(this.size)) {
          list_size = this.size.run();
        } else {
          list_size = this.size;
        }
        _ref = _.range(list_size);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          type = this.item.run();
          new_item = construct(type, self, i);
          ret_val.push(new_item);
        }
        return ret_val;
      }
    };
  };

  range = function(p) {
    var ret_val;
    return ret_val = {
      from: p.from,
      to: p.to,
      run: function(self) {
        var delta, diff;
        diff = this.to - this.from;
        delta = diff * Math.random();
        return this.from + delta;
      }
    };
  };

  method = function(p) {
    var ret_val;
    return ret_val = {
      method: p.method,
      run: function(self) {
        return this.method(self);
      }
    };
  };

  module.exports = {
    construct: construct,
    fixed: fixed,
    rnd_variable: rnd_variable,
    variance: variance,
    select_one: select_one,
    select_type_create_instance: select_type_create_instance,
    probability: probability,
    select_list: select_list,
    range: range,
    method: method
  };

}).call(this);
