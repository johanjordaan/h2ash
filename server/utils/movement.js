// Generated by CoffeeScript 1.6.3
(function() {
  var Movable, THREE, movement, _;

  movement = {
    Movable: Movable = (function() {
      function Movable(position, direction, max_speed, max_angular_speed, last_update) {
        this.position = position;
        this.direction = direction;
        this.max_speed = max_speed;
        this.max_angular_speed = max_angular_speed;
        this.last_update = last_update;
        this.speed = 0;
        this.angular_speed = 0;
      }

      Movable.prototype.set_speed = function(speed) {
        this.speed = speed;
        if (this.speed > this.max_speed) {
          this.speed = this.max_speed;
        }
        if (this.speed < 0) {
          return this.speed = 0;
        }
      };

      Movable.prototype.set_angular_speed = function(angular_speed) {
        this.angular_speed = angular_speed;
        if (this.angular_speed > this.max_angular_speed) {
          this.angular_speed = this.max_angular_speed;
        }
        if (this.angular_speed < 0) {
          return this.angular_speed = 0;
        }
      };

      Movable.prototype.set_target_position = function(target_position) {
        this.target_position = target_position;
        this.target = null;
        return this.target_direction = null;
      };

      Movable.prototype.set_target = function(target) {
        this.target = target;
        this.target_position = null;
        return this.target_direction = null;
      };

      Movable.prototype._get_target_direction = function() {
        if (this.target != null) {
          return this.position.clone().sub(this.target.position).normalize();
        } else if (this.target_position != null) {
          return this.position.clone().sub(this.target_position).normalize();
        } else {
          return this.direction;
        }
      };

      Movable.prototype._get_target_position = function() {
        if (this.target != null) {
          return this.target.position;
        } else if (this.target_position != null) {
          return this.target_position;
        } else {
          return this.position;
        }
      };

      Movable.prototype.rotation_granularity = 1000;

      Movable.prototype.position_accuracy = 0.01;

      Movable.prototype._update_translation = function(delta) {
        var delta_position, distance_to_target, max_delta;
        if (this.speed <= 0) {
          return;
        }
        distance_to_target = Math.abs(this.position.distanceTo(this._get_target_position()));
        if (distance_to_target < this.position_accuracy) {

        } else {
          max_delta = distance_to_target / this.speed * 1000;
          if (max_delta < delta) {
            delta = max_delta;
          }
          delta_position = this.direction.clone().multiplyScalar(this.speed * delta / 1000);
          return this.position.add(delta_position);
        }
      };

      Movable.prototype._update_direction = function(delta) {
        var cos_theta, k, k_cross_v_sin_theta, k_dot_v, sin_theta, theta;
        theta = this.angular_speed * delta / 1000;
        k = this.direction.clone().cross(this._get_target_direction()).normalize();
        cos_theta = Math.cos(theta);
        sin_theta = Math.sin(theta);
        k_dot_v = k.clone().dot(this.direction);
        k_cross_v_sin_theta = k.clone().cross(this.direction).normalize().multiplyScalar(sin_theta);
        this.direction.multiplyScalar(cos_theta);
        this.direction.add(k_cross_v_sin_theta);
        return this.direction.add(k.clone().multiplyScalar(k_dot_v * (1 - cos_theta)));
      };

      Movable.prototype.update = function(time, _target_time) {
        var angular_distance, current_target_direction, delta;
        if (_target_time == null) {
          _target_time = time;
        }
        if (time > _target_time) {
          return;
        }
        delta = time - this.last_update;
        current_target_direction = this._get_target_direction();
        angular_distance = current_target_direction.angleTo(this.direction);
        if (angular_distance > 0.01 && this.angular_speed > 0) {
          if (delta > this.rotation_granularity) {
            this._update_translation(this.rotation_granularity);
            this._update_direction(this.rotation_granularity);
            this.last_update += this.rotation_granularity;
            return this.update(this.last_update + this.rotation_granularity, _target_time);
          } else {
            this._update_translation(delta);
            this._update_direction(delta);
            this.last_update += delta;
            return this.update(this.last_update + delta, _target_time);
          }
        } else {
          this.last_update += delta;
          return this._update_translation(delta);
        }
      };

      return Movable;

    })(),
    get_velocity: function(direction, speed) {
      return direction.clone().multiplyScalar(speed);
    },
    update_position: function(position, direction, speed, delta_time) {
      var delta_position;
      delta_position = this.get_velocity(direction, speed).multiplyScalar(delta_time);
      return position.add(delta_position);
    },
    update_rotation: function(direction, target_direction, angular_speed, delta_time) {
      var k, kdotv, theta, vr, vr_1, vr_2, vr_3;
      k = direction.clone().cross(target_direction).normalize();
      theta = angular_speed * delta_time;
      vr_1 = direction.clone().multiplyScalar(Math.cos(theta));
      vr_2 = (k.clone().cross(direction)).multiplyScalar(Math.sin(theta));
      kdotv = k.clone().dot(direction);
      vr_3 = k.clone().multiplyScalar(kdotv * (1 - Math.cos(theta)));
      return vr = vr_1.clone().add(vr_2).add(vr_3);
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    _ = require('underscore');
    THREE = require('three');
    module.exports = movement;
  }

  if (typeof define !== "undefined" && define !== null) {
    define(['underscore', 'THREE'], function(_, THREE) {
      return movement;
    });
  }

}).call(this);
