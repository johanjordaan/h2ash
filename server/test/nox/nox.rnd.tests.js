// Generated by CoffeeScript 1.6.3
(function() {
  var expect, fix_random_value, nox, saved_random, should;

  should = require('chai').should();

  expect = require('chai').expect;

  nox = require('../../nox/nox');

  saved_random = Math.random;

  fix_random_value = function(value) {
    return Math.random = function() {
      return value;
    };
  };

  describe('nox.rnd', function() {
    describe('- basic uasge : ', function() {
      var c, d;
      c = nox.rnd({
        min: 1,
        max: 6
      });
      it('should set the _nox_method flag', function() {
        return c._nox_method.should.equal(true);
      });
      it('should set the _nox_errors flag', function() {
        c._nox_errors.should.be.a('array');
        return c._nox_errors.length.should.equal(0);
      });
      it('should store the min and max values in the relevant properties', function() {
        c.min.should.equal(1);
        return c.max.should.equal(6);
      });
      d = nox.rnd({
        max: 20
      });
      it('should set the min default to 0', function() {
        return d.min.should.equal(0);
      });
      it('should set the normal flag to false (deafult is a flat distribution)', function() {
        return d.normal.should.equal(false);
      });
      return it('should return the value when it is run', function() {
        var c_result;
        fix_random_value(1);
        c_result = c.run();
        return c_result.should.equal(6);
      });
    });
    describe('- recursive usage : ', function() {
      var c;
      c = nox.rnd({
        min: 15,
        max: nox["const"]({
          value: 20
        })
      });
      it('should set the _nox_method flag on the levels', function() {
        c._nox_method.should.equal(true);
        return c.max._nox_method.should.equal(true);
      });
      it('should set the _nox_errors flag', function() {
        c._nox_errors.should.be.a('array');
        c._nox_errors.length.should.equal(0);
        c.max._nox_errors.should.be.a('array');
        return c.max._nox_errors.length.should.equal(0);
      });
      it('should set the value of the lowest level value', function() {
        return c.max.value.should.equal(20);
      });
      return it('should return the value when it is run', function() {
        var c_result;
        fix_random_value(0);
        c_result = c.run();
        return c_result.should.equal(15);
      });
    });
    describe('- error conditions :', function() {
      var c, c_result;
      c = nox.rnd({});
      c_result = c.run();
      it('should return an error list if the required fields (value) is not specified', function() {
        c_result.should.be.a('Array');
        return c_result.length.should.equal(1);
      });
      return it('should return a usable error message', function() {
        return c_result[0].should.equal("Required field [max] is missing.");
      });
    });
    describe('- statistical measures - flat distribution : ', function() {
      var c;
      c = nox.rnd({
        min: 0.5,
        max: 1.25
      });
      it('should return the minimum on a random 0', function() {
        var r;
        fix_random_value(0);
        r = c.run();
        return r.should.equal(0.5);
      });
      it('should return the maximum on a random 1', function() {
        var r;
        fix_random_value(1);
        r = c.run();
        return r.should.equal(1.25);
      });
      return it('should return the mid value on a random .5', function() {
        var r;
        fix_random_value(.5);
        r = c.run();
        return r.should.equal(0.5 + (1.25 - 0.5) / 2);
      });
    });
    return describe('- statistical measures - normal distribution : ', function() {
      var c;
      c = nox.rnd({
        min: -3.5,
        max: 99,
        normal: true
      });
      it('should return the minimum on a random 0', function() {
        var r;
        fix_random_value(0);
        r = c.run();
        return r.should.equal(-3.5);
      });
      it('should return the maximum on a random 1', function() {
        var r;
        fix_random_value(1);
        r = c.run();
        return r.should.equal(99);
      });
      return it('should return the mid value on a random .5', function() {
        var r;
        fix_random_value(.5);
        r = c.run();
        return r.should.equal(-3.5 + (99 + 3.5) / 2);
      });
    });
  });

}).call(this);
