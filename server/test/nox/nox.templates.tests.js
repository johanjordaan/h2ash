// Generated by CoffeeScript 1.6.3
(function() {
  var expect, nox, should, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  should = require('chai').should();

  expect = require('chai').expect;

  _ = require('underscore');

  nox = require('../../nox/nox');

  describe('nox.create_template', function() {
    return describe('- basic uasge : ', function() {
      var test_template;
      test_template = nox.create_template('test_template', {
        some_field: nox["const"]({
          value: 'some_value'
        })
      });
      it('should set the _nox_template flag', function() {
        return test_template._nox_template.should.equal(true);
      });
      it('should set the _nox_template_name to the name of the template', function() {
        return test_template._nox_template_name.should.equal('test_template');
      });
      return it('should add the template to the list of templates', function() {
        return (__indexOf.call(_.keys(nox.templates), 'test_template') >= 0).should.equal(true);
      });
    });
  });

  describe('nox.construct_template', function() {
    describe('- basic usage : ', function() {
      var parent_instance, parent_template, test_instance, test_template;
      parent_template = nox.create_template('parent_template', {
        parent_val: nox["const"]({
          value: 'parent_value'
        })
      });
      parent_instance = nox.construct_template(parent_template);
      it('should set _parent to unefined since this has no parent', function() {
        return expect(parent_instance._parent).to.not.exist;
      });
      it('should set _index to unefined since this has no parent', function() {
        return expect(parent_instance._parent).to.not.exist;
      });
      it('should set the value of parent_val to parent_value', function() {
        return parent_instance.parent_val.should.equal('parent_value');
      });
      test_template = nox.create_template('test_template', {
        some_field: nox["const"]({
          value: 'some_value'
        }),
        non_nox_value: 'Hallo'
      });
      test_instance = nox.construct_template(test_template, parent_instance, 3);
      it('should set _parent to the provided parent (parent_instance)', function() {
        return test_instance._parent.should.equal(parent_instance);
      });
      it('should set _index to the provided index (3)', function() {
        return test_instance._index.should.equal(3);
      });
      return it('should copy any non nox values directly to the result', function() {
        return test_instance.non_nox_value.should.equal("Hallo");
      });
    });
    describe('- string based construction usage : ', function() {
      var parent_instance, parent_template;
      parent_template = nox.create_template('parent_template', {
        parent_val: nox["const"]({
          value: 'parent_value'
        })
      });
      parent_instance = nox.construct_template('parent_template');
      it('should set _parent to unefined since this has no parent', function() {
        return expect(parent_instance._parent).to.not.exist;
      });
      it('should set _index to unefined since this has no parent', function() {
        return expect(parent_instance._parent).to.not.exist;
      });
      return it('should set the value of parent_val to parent_value', function() {
        return parent_instance.parent_val.should.equal('parent_value');
      });
    });
    return describe('- error conditions : ', function() {
      var parent_instance, string_instance, xxx;
      xxx = {};
      parent_instance = nox.construct_template(xxx.a);
      it('should return an error list if template passed to the constructor does not exist', function() {
        parent_instance._nox_errors.should.be.a('Array');
        return parent_instance._nox_errors.length.should.equal(1);
      });
      it('should return a usable error message', function() {
        return parent_instance._nox_errors[0].should.equal("Cannot construct template with undefined template parameter.");
      });
      string_instance = nox.construct_template('some_silly_template');
      return it('should tell the user which template it could not find', function() {
        return string_instance._nox_errors[0].should.equal("Cannot find template [some_silly_template].");
      });
    });
  });

}).call(this);
