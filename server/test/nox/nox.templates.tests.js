// Generated by CoffeeScript 1.6.3
(function() {
  var expect, fix_random_value, fix_random_values, nox, should, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  should = require('chai').should();

  expect = require('chai').expect;

  _ = require('underscore');

  nox = require('../../nox/nox');

  fix_random_value = function(value) {
    return fix_random_values([value]);
  };

  fix_random_values = function(values) {
    values = values.reverse();
    return Math.random = function() {
      var value;
      value = values.pop();
      fix_random_values(values.reverse());
      return value;
    };
  };

  describe('nox.create_template', function() {
    return describe('- basic uasge : ', function() {
      var test_template;
      test_template = nox.create_template('test_template', {
        some_field: nox["const"]({
          value: 'some_value'
        })
      });
      it('should set the _nox_template flag', function() {
        return test_template._nox_template.should.equal(true);
      });
      it('should set the _nox_template_name to the name of the template', function() {
        return test_template._nox_template_name.should.equal('test_template');
      });
      return it('should add the template to the list of templates', function() {
        return (__indexOf.call(_.keys(nox.templates), 'test_template') >= 0).should.equal(true);
      });
    });
  });

  describe('nox.construct_template', function() {
    describe('- basic usage : ', function() {
      var parent_instance, parent_template, test_instance, test_template;
      parent_template = nox.create_template('parent_template', {
        parent_val: nox["const"]({
          value: 'parent_value'
        })
      });
      parent_instance = nox.construct_template(parent_template);
      it('should set _parent to unefined since this has no parent', function() {
        return expect(parent_instance._parent).to.not.exist;
      });
      it('should set _index to unefined since this has no parent', function() {
        return expect(parent_instance._parent).to.not.exist;
      });
      it('should set the value of parent_val to parent_value', function() {
        return parent_instance.parent_val.should.equal('parent_value');
      });
      test_template = nox.create_template('test_template', {
        some_field: nox["const"]({
          value: 'some_value'
        }),
        non_nox_value: 'Hallo'
      });
      test_instance = nox.construct_template(test_template, parent_instance, 3);
      it('should set _parent to the provided parent (parent_instance)', function() {
        return test_instance._parent.should.equal(parent_instance);
      });
      it('should set _index to the provided index (3)', function() {
        return test_instance._index.should.equal(3);
      });
      it('should set the _nox_template_name of the isntance to the name of the template used to create it', function() {
        return test_instance._nox_template_name.should.equal('test_template');
      });
      return it('should copy any non nox values directly to the result', function() {
        return test_instance.non_nox_value.should.equal("Hallo");
      });
    });
    describe('- string based construction usage : ', function() {
      var parent_instance, parent_template;
      parent_template = nox.create_template('parent_template', {
        parent_val: nox["const"]({
          value: 'parent_value'
        })
      });
      parent_instance = nox.construct_template('parent_template');
      it('should set _parent to unefined since this has no parent', function() {
        return expect(parent_instance._parent).to.not.exist;
      });
      it('should set _index to unefined since this has no parent', function() {
        return expect(parent_instance._parent).to.not.exist;
      });
      return it('should set the value of parent_val to parent_value', function() {
        return parent_instance.parent_val.should.equal('parent_value');
      });
    });
    return describe('- error conditions : ', function() {
      var parent_instance, string_instance, xxx;
      xxx = {};
      parent_instance = nox.construct_template(xxx.a);
      it('should return an error list if template passed to the constructor does not exist', function() {
        parent_instance._nox_errors.should.be.a('Array');
        return parent_instance._nox_errors.length.should.equal(1);
      });
      it('should return a usable error message', function() {
        return parent_instance._nox_errors[0].should.equal("Cannot construct template with undefined template parameter.");
      });
      string_instance = nox.construct_template('some_silly_template');
      return it('should tell the user which template it could not find', function() {
        return string_instance._nox_errors[0].should.equal("Cannot find template [some_silly_template].");
      });
    });
  });

  describe('nox.extend_template', function() {
    return describe('- basic usage (using the actual template class as input) : ', function() {
      var base_template, child, child_template;
      base_template = nox.create_template('base_template', {
        name: nox["const"]({
          value: 'name_field'
        }),
        type: nox["const"]({
          value: 'type_field'
        }),
        age: nox["const"]({
          value: 100
        }),
        city: "Joburg",
        some_field: "some_field",
        another: nox.rnd({
          max: 10
        })
      });
      child_template = nox.extend_template(base_template, 'child_template', {
        type: {
          value: 'child_type'
        },
        child_field: nox["const"]({
          value: 'child specific field'
        }),
        age: nox.rnd({
          max: 80
        }),
        city: "Pretoria",
        some_field: nox["const"]({
          value: "not_some_value"
        }),
        another: "not 10"
      });
      it('should set the name of the extended template to the name specified', function() {
        return child_template._nox_template_name.should.equal('child_template');
      });
      it('should add the base class fields to the extended template', function() {
        expect(child_template.name).to.exist;
        return child_template.name.value.should.equal('name_field');
      });
      it('should override existing fields parameters ', function() {
        expect(child_template.type).to.exist;
        return child_template.type.value.should.equal('child_type');
      });
      it('should add any new fields from the child template ', function() {
        expect(child_template.child_field).to.exist;
        return child_template.child_field.value.should.equal('child specific field');
      });
      it('should allow overiding of the function', function() {
        expect(child_template.age).to.exist;
        return child_template.age.max.should.equal(80);
      });
      it('should allow overriding of direct fields with direct fields', function() {
        return child_template.city.should.equal("Pretoria");
      });
      it('should allow overriding of direct fields with nox_methods', function() {
        return child_template.some_field.value.should.equal("not_some_value");
      });
      it('should allow the overriding of a nox_method by a direct value', function() {
        return child_template.another.should.equal("not 10");
      });
      fix_random_value(1);
      child = nox.construct_template(child_template);
      return it('should return the values from the child template and ones derived from base', function() {
        child.type.should.equal('child_type');
        child.child_field.should.equal('child specific field');
        return child.age.should.equal(80);
      });
    });
  });

}).call(this);
