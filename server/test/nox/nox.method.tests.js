// Generated by CoffeeScript 1.6.3
(function() {
  var expect, nox, should, test_method, _;

  _ = require('underscore');

  should = require('chai').should();

  expect = require('chai').expect;

  nox = require('../../nox/nox');

  test_method = function(o) {
    return 'Hallo';
  };

  describe('nox.method', function() {
    describe('- basic uasge : ', function() {
      var c;
      c = nox.method({
        method: test_method
      });
      it('should set the _nox_method flag', function() {
        return c._nox_method.should.equal(true);
      });
      it('should set the _nox_errors flag', function() {
        c._nox_errors.should.be.a('array');
        return c._nox_errors.length.should.equal(0);
      });
      it('should store the value in the value variable', function() {
        c.method.should.be.a('function');
        return c.method.should.equal(test_method);
      });
      return it('should return the value from the method when it is run', function() {
        var c_result;
        c_result = c.run();
        return c_result.should.equal("Hallo");
      });
    });
    describe('- recursive usage : ', function() {
      var c;
      c = nox.method({
        method: nox["const"]({
          value: test_method
        })
      });
      it('should set the _nox_method flag on the levels', function() {
        c._nox_method.should.equal(true);
        return c.method._nox_method.should.equal(true);
      });
      it('should set the correct method field', function() {
        c.method.should.be.a('object');
        c.method.value.should.be.a('function');
        return c.method.value.should.equal(test_method);
      });
      return it('should return the result of the method when it is run', function() {
        var c_result;
        c_result = c.run();
        return c_result.should.equal("Hallo");
      });
    });
    return describe('- error conditions :', function() {
      var c, c_result;
      c = nox.method({});
      c_result = c.run();
      it('should return an error list if the required fields (value) is not specified', function() {
        c_result.should.be.a('Array');
        return c_result.length.should.equal(1);
      });
      return it('should return a usable error message', function() {
        return c_result[0].should.equal("Required field [method] is missing.");
      });
    });
  });

}).call(this);
