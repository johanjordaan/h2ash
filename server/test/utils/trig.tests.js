// Generated by CoffeeScript 1.6.3
(function() {
  var expect, should, trig, _;

  _ = require('underscore');

  should = require('chai').should();

  expect = require('chai').expect;

  trig = require('../../utils/trig');

  describe('utils.trig', function() {
    describe('deg2rad - convert degrees to radian', function() {
      it('should convert 0 deg to 0 radians', function() {
        return trig.deg2rad(0).should.equal(0);
      });
      it('should convert 90 deg to PI/2', function() {
        return trig.deg2rad(90).should.equal(Math.PI / 2);
      });
      it('should convert 180 deg to PI', function() {
        return trig.deg2rad(180).should.equal(Math.PI);
      });
      it('should convert 270 deg to PI+PI/2', function() {
        return trig.deg2rad(270).should.equal(Math.PI + Math.PI / 2);
      });
      it('should convert 360 deg to 0', function() {
        return trig.deg2rad(360).should.equal(0);
      });
      it('should convert 359 deg to 2*PI', function() {
        return trig.deg2rad(359.9999999999999).should.be.within(2 * Math.PI - 0.00001, 2 * Math.PI + 0.00001);
      });
      it('should convert -90 deg to 270 converted', function() {
        return trig.deg2rad(-90).should.equal(trig.deg2rad(270));
      });
      it('should convert -0 deg to 0 converted', function() {
        return trig.deg2rad(-0).should.equal(trig.deg2rad(0));
      });
      it('should convert -180 deg to 180 converted', function() {
        return trig.deg2rad(-180).should.equal(trig.deg2rad(180));
      });
      it('should convert -270 deg to 90 converted', function() {
        return trig.deg2rad(-270).should.equal(trig.deg2rad(90));
      });
      return it('should reduce all angles bigger than 360 to the 0-360 range', function() {
        var i, r, _i, _len, _ref, _results;
        _ref = _.range(100);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          r = _.random(360, 3600);
          _results.push(trig.deg2rad(r).should.equal(trig.deg2rad(r % 360)));
        }
        return _results;
      });
    });
    describe('rad2deg - convert radians to degrees', function() {
      it('should convert 0 rad to 0 deg', function() {
        return trig.rad2deg(0).should.equal(0);
      });
      it('should convert PI/2 rad to 90 deg', function() {
        return trig.rad2deg(Math.PI / 2).should.equal(90);
      });
      it('should convert PI rad to 180 deg', function() {
        return trig.rad2deg(Math.PI).should.equal(180);
      });
      it('should convert PI+PI/2 rad to 270 deg', function() {
        return trig.rad2deg(Math.PI + Math.PI / 2).should.equal(270);
      });
      return it('should convert 359 degrees to 2*PI', function() {
        return trig.rad2deg(2 * Math.PI).should.be.within(359.9999999999999 - 0.00001, 359.9999999999999 + 0.00001);
      });
    });
    describe('make_cc - construct a cartesian coordinate object (x,y,z)', function() {
      var cc;
      cc = trig.make_cc(-45, 34.1, -0.0001);
      it('should return an object with x to the suplied value', function() {
        return cc.x.should.equal(-45);
      });
      it('should return an object with y to the suplied value', function() {
        return cc.y.should.equal(34.1);
      });
      return it('should return an object with y to the suplied value', function() {
        return cc.z.should.equal(-0.0001);
      });
    });
    return describe('make_sc -  construct a spherical coordinate object (r,theta,phi)', function() {
      var sc;
      sc = trig.make_sc(1002.3, Math.PI / 3, Math.PI);
      it('should return an object with r to the suplied value', function() {
        return sc.r.should.equal(1002.3);
      });
      it('should return an object with y to the suplied value', function() {
        return sc.theta.should.equal(Math.PI / 3);
      });
      return it('should return an object with y to the suplied value', function() {
        return sc.phi.should.equal(Math.PI);
      });
    });
  });

}).call(this);
