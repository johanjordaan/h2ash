// Generated by CoffeeScript 1.6.3
(function() {
  var app_setup, async, errors, expect, mongoose, request, should, _;

  _ = require('underscore');

  should = require('chai').should();

  expect = require('chai').expect;

  request = require('supertest');

  mongoose = require('mongoose');

  async = require('async');

  app_setup = require('../app');

  errors = require('../support/errors');

  describe('Authentication process', function() {
    var app, dbs;
    app = {};
    dbs = {};
    before(function(done) {
      return app_setup(true, function(test_app, test_dbs) {
        app = test_app;
        dbs = test_dbs;
        return async.series([
          function(cb) {
            var admin;
            admin = dbs.h2ash_auth.User({
              email: 'admin@h2ash.com',
              password: '123',
              admin: true,
              validated: true,
              registration_token: "",
              token: ""
            });
            return admin.save(function(err, res) {
              return cb(null, '');
            });
          }
        ], function() {
          return done();
        });
      });
    });
    return describe('login', function() {
      it('should not provide a token if the username and password is not correct', function(done) {
        return request(app).post("/authentication/login").send({
          email: 'some_user@there.com',
          password: 'xxxx'
        }).end(function(err, res) {
          var json;
          res.status.should.equal(200);
          json = JSON.parse(res.text);
          json.error_code.should.equal(errors.INVALID_CREDENTIALS.error_code);
          json.error_message.should.equal(errors.INVALID_CREDENTIALS.error_message);
          expect(json.token).to.not.exist;
          return done();
        });
      });
      it('should not provide a token if the password is not correct', function(done) {
        return request(app).post("/authentication/login").send({
          email: 'admin@h2ash.com',
          password: 'xxxx'
        }).end(function(err, res) {
          var json;
          res.status.should.equal(200);
          json = JSON.parse(res.text);
          json.error_code.should.equal(errors.INVALID_CREDENTIALS.error_code);
          json.error_message.should.equal(errors.INVALID_CREDENTIALS.error_message);
          expect(json.token).to.not.exist;
          return done();
        });
      });
      return it('should provide a token in response to a user and password', function(done) {
        return request(app).post("/authentication/login").send({
          email: 'admin@h2ash.com',
          password: '123'
        }).end(function(err, res) {
          var json;
          res.status.should.equal(200);
          json = JSON.parse(res.text);
          json.error_code.should.equal(errors.OK.error_code);
          json.error_message.should.equal(errors.OK.error_message);
          json.admin.should.equal(true);
          return done();
        });
      });
    });
  });

}).call(this);
