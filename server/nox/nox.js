// Generated by CoffeeScript 1.6.3
(function() {
  var MonsterTemplate, OrcChildTemplate, OrcTemplate, YEAR, get_name, nox, _;

  _ = require('underscore');

  nox = {};

  nox.is_template = function(object) {
    return object._nox_template;
  };

  nox.templates = {};

  nox.create_template = function(name, properties) {
    nox.templates[name] = properties;
    return properties;
  };

  nox.construct_template = function(template, parent, index) {
    var key, ret_val, target, _i, _len, _ref;
    ret_val = {
      _nox_template: true,
      _parent: parent,
      _index: index
    };
    _ref = _.keys(template);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (template[key]._nox_method === true) {
        if ((parent != null)) {
          target = this._parent.key(+'.' + key);
        }
        template[key]._target = target;
        ret_val[key] = template[key].run(ret_val);
      }
    }
    return ret_val;
  };

  nox.deep_clone = function(source) {
    var key, ret_val, _i, _len, _ref;
    ret_val = {};
    _ref = _.keys(source);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (_.isObject(source[key])) {
        if (!_.isFunction(source[key]) && !_.isArray(source[key]) && !_.isNumber(source[key])) {
          ret_val[key] = nox.deep_clone(source[key]);
        } else {
          ret_val[key] = source[key];
        }
      } else {
        ret_val[key] = source[key];
      }
    }
    return ret_val;
  };

  nox.extend_template = function(source_template, name, properties) {
    var key, property_key, ret_val, _i, _j, _len, _len1, _ref, _ref1;
    ret_val = nox.deep_clone(source_template);
    _ref = _.keys(properties);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      _ref1 = _.keys(properties[key]);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        property_key = _ref1[_j];
        ret_val[key][property_key] = properties[key][property_key];
      }
    }
    return nox.create_template(name, ret_val);
  };

  nox.resolve = function(parameter, target_object) {
    if (parameter._nox_method) {
      return parameter.run(target_object);
    } else {
      return parameter;
    }
  };

  nox["const"] = function(input) {
    var ret_val;
    ret_val = {
      _nox_method: true,
      value: input.value,
      run: function(target_object) {
        if (this.value._nox_method) {
          return this.value.run(target_object);
        } else {
          return this.value;
        }
      }
    };
    return ret_val;
  };

  nox.method = function(input) {
    var ret_val;
    ret_val = {
      _nox_method: true,
      method: input.method,
      run: function(target_object) {
        if (this.method._nox_method) {
          return this.method.run(target_object)(target_object);
        } else {
          return this.method(target_object);
        }
      }
    };
    return ret_val;
  };

  nox.rnd = function(input) {
    var ret_val;
    if (input.min == null) {
      input.min = 0;
    }
    if (input.normal == null) {
      input.normal = false;
    }
    ret_val = {
      _nox_method: true,
      min: input.min,
      max: input.max,
      floor: input.floor,
      normal: input.normal,
      run: function(target_object) {
        var diff, i, itterations, max, min, normal, _i, _len, _ref;
        min = nox.resolve(this.min, target_object);
        max = nox.resolve(this.max, target_object);
        normal = nox.resolve(this.normal, target_object);
        itterations = normal ? 3 : 1;
        ret_val = 0;
        diff = max - min;
        _ref = _.range(itterations);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          ret_val += min + diff * Math.random();
        }
        ret_val = ret_val / itterations;
        return ret_val;
      }
    };
    return ret_val;
  };

  nox.rnd_normal = function(input) {
    input.normal = true;
    return nox.rnd(input);
  };

  nox.select = function(input) {
    var ret_val;
    if (input.count == null) {
      input.count = 1;
    }
    if (input.return_one == null) {
      input.return_one = false;
    }
    ret_val = {
      _nox_method: true,
      count: input.count,
      values: input.values,
      return_one: input.return_one,
      run: function(target_object) {
        var count, default_probability, i, item, probability, r, return_one, total_probability, values, _i, _j, _len, _len1, _ref;
        count = nox.resolve(this.count, target_object);
        values = nox.resolve(this.values, target_object);
        return_one = nox.resolve(this.return_one, target_object);
        default_probability = 1 / _.size(values);
        ret_val = [];
        _ref = _.range(count);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          r = Math.random();
          total_probability = 0;
          for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
            item = values[_j];
            probability = item.probability != null ? item.probability : default_probability;
            total_probability += probability;
            if (r <= total_probability) {
              if ((item.item != null) && (item.probability != null)) {
                if (nox.is_template(item.item)) {
                  ret_val.push(nox.construct_template(item.item));
                } else {
                  if (_.isString(item.item) && _.contains(_.keys(nox.templates), item.item)) {
                    ret_val.push(nox.construct_template(nox.templates[item.item]));
                  } else {
                    ret_val.push(item.item);
                  }
                }
              } else {
                if (_.isString(item) && _.contains(_.keys(nox.templates), item)) {
                  ret_val.push(nox.construct_template(nox.templates[item]));
                } else {
                  ret_val.push(item);
                }
              }
            }
          }
        }
        if (return_one) {
          return ret_val[0];
        } else {
          return ret_val;
        }
      }
    };
    return ret_val;
  };

  nox.select_one = function(input) {
    input.count = 1;
    input.return_one = true;
    return nox.select(input);
  };

  get_name = function(target_object) {
    if (target_object.type === 'Orc') {
      return 'HamishOrc';
    } else {
      return "No an orc";
    }
  };

  YEAR = {
    name: 'Years',
    symbol: 'T'
  };

  MonsterTemplate = nox.create_template('MonsterTemplate', {
    type: nox["const"]({
      value: 'Generic Monster'
    }),
    name: nox["const"]({
      value: 'Generic Monster Name'
    }),
    age: nox.rnd({
      min: 10,
      max: 15
    }),
    color: nox.select_one({
      values: ['Green', 'Brown', 'White']
    }),
    children: nox.select({
      count: 3
    })
  });

  OrcTemplate = nox.extend_template(MonsterTemplate, 'OrcTemplate', {
    type: {
      value: 'Orc'
    },
    name: {
      value: nox.method({
        method: nox["const"]({
          value: get_name
        })
      })
    },
    age: {
      min: 20,
      max: nox.rnd_normal({
        min: 20,
        max: 40
      })
    },
    children: {
      values: ['OrcChildTemplate']
    }
  });

  OrcChildTemplate = nox.extend_template(OrcTemplate, 'OrcChildTemplate', {
    children: nox["const"]({
      value: []
    }),
    age: nox.rnd({
      min: 0,
      max: 14
    })
  });

  console.log(OrcTemplate);

  console.log(nox.construct_template(OrcTemplate));

}).call(this);
