// Generated by CoffeeScript 1.6.3
(function() {
  define([], function() {
    var HMAP, diamond_square, frand, generate, init, sample, sample_diamond, sample_square, set_sample;
    HMAP = function(width, height) {
      var ret_val;
      return ret_val = {
        width: width,
        height: height,
        data: []
      };
    };
    sample = function(hmap, x, y) {
      return hmap.data[(x & (hmap.width - 1)) + (y & (hmap.height - 1)) * hmap.width];
    };
    set_sample = function(hmap, x, y, value) {
      return hmap.data[(x & (hmap.width - 1)) + (y & (hmap.height - 1)) * hmap.width] = value;
    };
    frand = function() {
      return (0.5 - Math.random()) * 2;
    };
    init = function(hmap, feature_size) {
      var i, x, y, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = _.range(hmap.width * hmap.height);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        hmap.data[i] = -1;
      }
      _ref1 = _.range(0, hmap.height, feature_size);
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        y = _ref1[_j];
        _results.push((function() {
          var _k, _len2, _ref2, _results1;
          _ref2 = _.range(0, hmap.width, feature_size);
          _results1 = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            x = _ref2[_k];
            _results1.push(set_sample(hmap, x, y, frand()));
          }
          return _results1;
        })());
      }
      return _results;
    };
    sample_square = function(hmap, x, y, size, value) {
      var a, b, c, d, hs;
      hs = size / 2;
      a = sample(hmap, x - hs, y - hs);
      b = sample(hmap, x + hs, y - hs);
      c = sample(hmap, x - hs, y + hs);
      d = sample(hmap, x + hs, y + hs);
      return set_sample(hmap, x, y, ((a + b + c + d) / 4.0) + value);
    };
    sample_diamond = function(hmap, x, y, size, value) {
      var a, b, c, d, hs;
      hs = size / 2;
      a = sample(hmap, x - hs, y);
      b = sample(hmap, x + hs, y);
      c = sample(hmap, x, y - hs);
      d = sample(hmap, x, y + hs);
      return set_sample(hmap, x, y, ((a + b + c + d) / 4.0) + value);
    };
    diamond_square = function(hmap, stepsize, scale) {
      var halfstep, x, y, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      halfstep = stepsize / 2;
      _ref = _.range(halfstep, hmap.height + halfstep, stepsize);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        y = _ref[_i];
        _ref1 = _.range(halfstep, hmap.width + halfstep, stepsize);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          x = _ref1[_j];
          sample_square(hmap, x, y, stepsize, frand() * scale);
        }
      }
      _ref2 = _.range(0, hmap.height, stepsize);
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        y = _ref2[_k];
        _results.push((function() {
          var _l, _len3, _ref3, _results1;
          _ref3 = _.range(0, hmap.width, stepsize);
          _results1 = [];
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            x = _ref3[_l];
            sample_diamond(hmap, x + halfstep, y, stepsize, frand() * scale);
            _results1.push(sample_diamond(hmap, x, y + halfstep, stepsize, frand() * scale));
          }
          return _results1;
        })());
      }
      return _results;
    };
    return generate = function(width, height, feature_size) {
      var new_hmap, sample_size, scale;
      new_hmap = new HMAP(width, height);
      init(new_hmap, feature_size);
      sample_size = feature_size;
      scale = 1.0;
      while (sample_size > 1) {
        diamond_square(new_hmap, sample_size, scale);
        sample_size = sample_size / 2;
        scale = scale / 2.0;
      }
      return new_hmap;
    };
  });

}).call(this);
