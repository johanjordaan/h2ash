// Generated by CoffeeScript 1.6.3
(function() {
  define(['THREE'], function(THREE) {
    var ah, animate, camera, cc, construct_sector, delta_phi, delta_r, delta_theta, height, i, pMaterial, particle, particleSystem, particles, phi_steps, r_steps, radius, render, renderer, renderers, sc, scale, scene, sector, theta_steps, width, _i, _len, _ref;
    camera = {};
    scene = {};
    renderer = {};
    particleSystem = {};
    sector = {};
    construct_sector = function(ra, rb, ta, tb, pa, pb) {
      var a, b, g1, g2, g3, i, yellowLineMaterial, _i, _len, _ref;
      sector = new THREE.Object3D();
      yellowLineMaterial = new THREE.LineBasicMaterial({
        color: 0xFF0000,
        shading: THREE.FlatShading,
        linewidth: 2
      });
      a = [];
      a.push(trig.sc2cc(trig.make_sc(ra, ta, pa)));
      a.push(trig.sc2cc(trig.make_sc(ra, tb, pa)));
      a.push(trig.sc2cc(trig.make_sc(ra, tb, pb)));
      a.push(trig.sc2cc(trig.make_sc(ra, ta, pb)));
      a.push(trig.sc2cc(trig.make_sc(ra, ta, pa)));
      b = [];
      b.push(trig.sc2cc(trig.make_sc(rb, ta, pa)));
      b.push(trig.sc2cc(trig.make_sc(rb, tb, pa)));
      b.push(trig.sc2cc(trig.make_sc(rb, tb, pb)));
      b.push(trig.sc2cc(trig.make_sc(rb, ta, pb)));
      b.push(trig.sc2cc(trig.make_sc(rb, ta, pa)));
      _ref = _.range(4);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        g1 = new THREE.Geometry();
        g1.vertices.push(new THREE.Vector3(a[i].x, a[i].y, a[i].z));
        g1.vertices.push(new THREE.Vector3(a[i + 1].x, a[i + 1].y, a[i + 1].z));
        sector.add(new THREE.Line(g1, yellowLineMaterial));
        g2 = new THREE.Geometry();
        g2.vertices.push(new THREE.Vector3(b[i].x, b[i].y, b[i].z));
        g2.vertices.push(new THREE.Vector3(b[i + 1].x, b[i + 1].y, b[i + 1].z));
        sector.add(new THREE.Line(g2, yellowLineMaterial));
        g3 = new THREE.Geometry();
        g3.vertices.push(new THREE.Vector3(a[i].x, a[i].y, a[i].z));
        g3.vertices.push(new THREE.Vector3(b[i].x, b[i].y, b[i].z));
        sector.add(new THREE.Line(g3, yellowLineMaterial));
      }
      return sector;
    };
    width = 320;
    height = 240;
    camera = new THREE.PerspectiveCamera(75, width / height, 1, 10000);
    camera.position.z = 1000;
    scene = new THREE.Scene();
    renderer = new THREE.WebGLRenderer();
    renderer.setSize(width, height);
    renderer.setClearColor(0x000000, 1);
    particles = new THREE.Geometry();
    scale = 2;
    radius = 1000;
    r_steps = 10 * scale;
    delta_r = radius / r_steps;
    theta_steps = 12 * scale;
    delta_theta = Math.PI / theta_steps;
    phi_steps = 24 * scale;
    delta_phi = (2 * Math.PI) / phi_steps;
    _ref = _.range(10000);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      sc = trig.make_sc(_.random(0, radius), Math.random() * Math.PI, Math.random() * 2 * Math.PI);
      cc = trig.sc2cc(sc);
      particle = new THREE.Vector3(cc.x, cc.y, cc.z);
      particles.vertices.push(particle);
    }
    pMaterial = new THREE.ParticleBasicMaterial({
      color: 0xFFFFFF,
      size: 16,
      map: THREE.ImageUtils.loadTexture("images/particle.png"),
      transparent: true,
      blending: THREE.AdditiveBlending,
      depthWrite: true
    });
    particleSystem = new THREE.ParticleSystem(particles, pMaterial);
    particleSystem.sortParticles = true;
    scene.add(particleSystem);
    sector = construct_sector(delta_r * 12, delta_r * 13, 0, delta_theta, Math.PI * .5, Math.PI * .5 + delta_phi);
    scene.add(sector);
    ah = new THREE.AxisHelper(5000);
    scene.add(ah);
    renderers = {};
    render = function() {
      var speed, _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = renderers.length; _j < _len1; _j++) {
        renderer = renderers[_j];
        speed = 0.001;
        _results.push(renderer.renderer.render(renderer.scene, renderer.camera));
      }
      return _results;
    };
    animate = function() {
      requestAnimationFrame(animate);
      return render();
    };
    return function() {
      return {
        create_renderer: function(name, width, height) {
          renderer = new THREE.WebGLRenderer();
          renderer.setSize(width, height);
          renderer.setClearColor(0x000000, 1);
          camera = new THREE.PerspectiveCamera(75, width / height, 1, 10000);
          camera.position.z = 1000;
          scene = new THREE.Scene();
          return renderers[name] = {
            active: true,
            renderer: renderer,
            camera: camera,
            scene: scene
          };
        },
        get_renderer: function(name) {
          return renderers[name].renderer;
        },
        run: function() {
          return animate();
        }
      };
    };
  });

}).call(this);
